#!/usr/bin/python3

import unittest
from query_parser import *


class ParseResponseTests(unittest.TestCase):

    def setUp(self):

        self.request_bytes = [
            0xdc, 0x78, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77,
            0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03,
            0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01
        ]

        self.response_bytes = [
            0xdc, 0x78, 0x81, 0x80, 0x00, 0x01, 0x00, 0x05,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77,
            0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03,
            0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01,
            0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x00, 0xf8, 0x00, 0x04, 0xad, 0xc2, 0x20, 0xf3,
            0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x00, 0xf8, 0x00, 0x04, 0xad, 0xc2, 0x20, 0xf1,
            0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x00, 0xf8, 0x00, 0x04, 0xad, 0xc2, 0x20, 0xf4,
            0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x00, 0xf8, 0x00, 0x04, 0xad, 0xc2, 0x20, 0xf2,
            0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x00, 0xf8, 0x00, 0x04, 0xad, 0xc2, 0x20, 0xf0
        ]

        self.response_mx_bytes = [
            0x38, 0xde, 0x81, 0x80, 0x00, 0x01, 0x00, 0x05,
            0x00, 0x00, 0x00, 0x0a, 0x06, 0x67, 0x6f, 0x6f,
            0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00,
            0x00, 0x0f, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x0f,
            0x00, 0x01, 0x00, 0x00, 0x02, 0x58, 0x00, 0x11,
            0x00, 0x28, 0x04, 0x61, 0x6c, 0x74, 0x33, 0x05,
            0x61, 0x73, 0x70, 0x6d, 0x78, 0x01, 0x6c, 0xc0,
            0x0c, 0xc0, 0x0c, 0x00, 0x0f, 0x00, 0x01, 0x00,
            0x00, 0x02, 0x58, 0x00, 0x04, 0x00, 0x0a, 0xc0,
            0x2f, 0xc0, 0x0c, 0x00, 0x0f, 0x00, 0x01, 0x00,
            0x00, 0x02, 0x58, 0x00, 0x09, 0x00, 0x32, 0x04,
            0x61, 0x6c, 0x74, 0x34, 0xc0, 0x2f, 0xc0, 0x0c,
            0x00, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x02, 0x58,
            0x00, 0x09, 0x00, 0x1e, 0x04, 0x61, 0x6c, 0x74,
            0x32, 0xc0, 0x2f, 0xc0, 0x0c, 0x00, 0x0f, 0x00,
            0x01, 0x00, 0x00, 0x02, 0x58, 0x00, 0x09, 0x00,
            0x14, 0x04, 0x61, 0x6c, 0x74, 0x31, 0xc0, 0x2f,
            0xc0, 0x57, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x01, 0x25, 0x00, 0x04, 0x4a, 0x7d, 0xca, 0x1b,
            0xc0, 0x57, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00,
            0x01, 0x25, 0x00, 0x10, 0x26, 0x07, 0xf8, 0xb0,
            0x40, 0x01, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1b, 0xc0, 0x6c, 0x00, 0x01,
            0x00, 0x01, 0x00, 0x00, 0x00, 0xd5, 0x00, 0x04,
            0x4a, 0x7d, 0x1c, 0x1b, 0xc0, 0x6c, 0x00, 0x1c,
            0x00, 0x01, 0x00, 0x00, 0x01, 0x25, 0x00, 0x10,
            0x26, 0x07, 0xf8, 0xb0, 0x40, 0x0e, 0x0c, 0x04,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a,
            0xc0, 0x81, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x00, 0xd5, 0x00, 0x04, 0x40, 0xe9, 0xbc, 0x1b,
            0xc0, 0x81, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00,
            0x01, 0x25, 0x00, 0x10, 0x24, 0x04, 0x68, 0x00,
            0x40, 0x08, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1a, 0xc0, 0x2a, 0x00, 0x01,
            0x00, 0x01, 0x00, 0x00, 0x01, 0x25, 0x00, 0x04,
            0x40, 0xe9, 0xa8, 0x1b, 0xc0, 0x2a, 0x00, 0x1c,
            0x00, 0x01, 0x00, 0x00, 0x01, 0x25, 0x00, 0x10,
            0x26, 0x07, 0xf8, 0xb0, 0x40, 0x03, 0x0c, 0x07,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
            0xc0, 0x2f, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x01, 0x25, 0x00, 0x04, 0x40, 0xe9, 0xa5, 0x1b,
            0xc0, 0x2f, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00,
            0x01, 0x25, 0x00, 0x10, 0x2a, 0x00, 0x14, 0x50,
            0x40, 0x10, 0x0c, 0x09, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1b
        ]

    def test_query_response(self):
        query = Query.get_query_information(bytes(self.response_bytes))
        self.assertEqual(0xdc78, query.id)
        self.assertEqual(1, len(query.questions))
        self.assertEqual(5, len(query.answers))
        self.assertEqual(0, len(query.authorities))
        self.assertEqual(0, len(query.additional))

    def test_response_flags(self):
        query = Query.get_query_information(bytes(self.response_bytes))
        self.assertEqual(QueryType.Response, query.flags.type)
        self.assertEqual(QueryOpcode.StandartQuery,
                         query.flags.opcode)
        self.assertEqual(False, query.flags.authority_answer)
        self.assertEqual(False, query.flags.truncated)
        self.assertEqual(True, query.flags.recursion_desired)
        self.assertEqual(True, query.flags.recursion_available)
        self.assertEqual(QueryReplyCode.NoError, query.flags.reply_code)

    def test_query_request(self):
        query = Query.get_query_information(bytes(self.request_bytes))
        self.assertEqual(0xdc78, query.id)
        self.assertEqual(1, len(query.questions))
        self.assertEqual(0, len(query.answers))
        self.assertEqual(0, len(query.authorities))
        self.assertEqual(0, len(query.additional))

    def test_request_flags(self):
        query = Query.get_query_information(bytes(self.request_bytes))
        self.assertEqual(QueryType.Request, query.flags.type)
        self.assertEqual(QueryOpcode.StandartQuery,
                         query.flags.opcode)
        self.assertEqual(True, query.flags.recursion_desired)

    def test_question(self):
        query = Query.get_query_information(bytes(self.request_bytes))
        question = query.questions[0]
        self.assertEqual("www.google.com", question.name)
        self.assertEqual(RecordType.Ipv4, question.type)

    def test_record(self):
        query = Query.get_query_information(bytes(self.response_bytes))
        answer = query.answers[0]
        self.assertEqual("www.google.com", answer.name)
        self.assertEqual(RecordType.Ipv4, answer.type)
        self.assertEqual(248, answer.time_to_live)
        self.assertEqual("173.194.32.243", str(answer.data))

    def test_get_query_flags(self):
        flags = Query.QueryFlags.get_flags(QueryType.Request, True)
        self.assertEqual(QueryType.Request, flags.type)
        self.assertEqual(QueryOpcode.StandartQuery, flags.opcode)
        self.assertEqual(False, flags.authority_answer)
        self.assertEqual(False, flags.truncated)
        self.assertEqual(True, flags.recursion_desired)
        self.assertEqual(False, flags.recursion_available)
        self.assertEqual(QueryReplyCode.NoError, flags.reply_code)

    def test_generate_query_request(self):
        data = bytes(self.request_bytes)
        query = Query.get_query_information(data)
        new_data = query.get_raw_bytes()
        self.assertEqual(data, new_data)

    def test_MX_records(self):
        data = bytes(self.response_mx_bytes)
        query = Query.get_query_information(data)
        answers = query.answers
        correct_data = {
            (10, "aspmx.l.google.com"),
            (20, "alt1.aspmx.l.google.com"),
            (30, "alt2.aspmx.l.google.com"),
            (40, "alt3.aspmx.l.google.com"),
            (50, "alt4.aspmx.l.google.com"),
        }
        for answer in answers:
            self.assertEqual(RecordType.MailExchanger, answer.type)
        data = {(answer.data.preference, answer.data.domain_name)
                for answer in answers}
        self.assertEqual(correct_data, data)


if __name__ == "__main__":
    unittest.main()
